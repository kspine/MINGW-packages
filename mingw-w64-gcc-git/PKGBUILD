# Maintainer: Alexey Pavlov <alexpux@gmail.com>
# Maintainer: Ray Donnelly <mingw.android@gmail.com>
# Contributor: Alexey Borzenkov <snaury@gmail.com>
# Contributor: Renato Silva <br.renatosilva@gmail.com>

_realname=gcc
pkgbase=mingw-w64-${_realname}-mcf
pkgname=("${MINGW_PACKAGE_PREFIX}-${_realname}-mcf"
         "${MINGW_PACKAGE_PREFIX}-${_realname}-mcf-libs")
provides=("${MINGW_PACKAGE_PREFIX}-${_realname}=${pkgver}"
          "${MINGW_PACKAGE_PREFIX}-${_realname}-libs=${pkgver}")
conflicts=("${MINGW_PACKAGE_PREFIX}-${_realname}"
           "${MINGW_PACKAGE_PREFIX}-${_realname}-libs"
           "${MINGW_PACKAGE_PREFIX}-${_realname}-git"
           "${MINGW_PACKAGE_PREFIX}-${_realname}-libs-git")
pkgver=r146802.053082de7ff
pkgrel=1
pkgdesc="GNU Compiler Collection (C,C++,OpenMP) for MinGW-w64 with MCF thread model"
depends=("${MINGW_PACKAGE_PREFIX}-binutils"
         "${MINGW_PACKAGE_PREFIX}-crt"
         "${MINGW_PACKAGE_PREFIX}-headers"
         "${MINGW_PACKAGE_PREFIX}-isl"
         "${MINGW_PACKAGE_PREFIX}-libiconv"
         "${MINGW_PACKAGE_PREFIX}-mpc"
         "${MINGW_PACKAGE_PREFIX}-windows-default-manifest"
         "${MINGW_PACKAGE_PREFIX}-winpthreads"
         "${MINGW_PACKAGE_PREFIX}-zlib"
         "${MINGW_PACKAGE_PREFIX}-mcfgthread-libs")
arch=('any')
url="https://gcc.gnu.org"
license=('GPL' 'LGPL' 'FDL' 'custom')
groups=("${MINGW_PACKAGE_PREFIX}-toolchain")
makedepends=("${MINGW_PACKAGE_PREFIX}-${_realname}"
             "${MINGW_PACKAGE_PREFIX}-binutils"
             "${MINGW_PACKAGE_PREFIX}-crt"
             "${MINGW_PACKAGE_PREFIX}-headers"
             "${MINGW_PACKAGE_PREFIX}-gmp"
             "${MINGW_PACKAGE_PREFIX}-isl"
             "${MINGW_PACKAGE_PREFIX}-libiconv"
             "${MINGW_PACKAGE_PREFIX}-mpc"
             "${MINGW_PACKAGE_PREFIX}-mpfr"
             "${MINGW_PACKAGE_PREFIX}-windows-default-manifest"
             "${MINGW_PACKAGE_PREFIX}-winpthreads"
             "${MINGW_PACKAGE_PREFIX}-zlib"
             "${MINGW_PACKAGE_PREFIX}-mcfgthread")
#checkdepends=('dejagnu')
optdepends=()
options=('staticlibs' '!emptydirs' '!strip') # 'debug'
#_branch=gcc-5-branch
_branch=gcc-6-branch
# TODO :: Automate this somehow?
if [ "${_branch}" = "gcc-6-branch" ]; then
  _realpkgver=6.3.1
else
  _realpkgver=5.4.1
fi

source=("git://gcc.gnu.org/git/gcc.git#branch=${_branch}"
        "0001-gcc-5-branch-gfortran-incorrect-reading-of-values-fr.patch"
        "0002-Relocate-libintl.patch"
        "0003-Windows-Follow-Posix-dir-exists-semantics-more-close.patch"
        "0004-Windows-Use-not-in-progpath-and-leave-case-as-is.patch"
        "0005-Windows-Don-t-ignore-native-system-header-dir.patch"
        "0006-gcc-5-branch-Windows-New-feature-to-allow-overriding.patch"
        "0006-gcc-6-branch-Windows-New-feature-to-allow-overriding.patch"
        "0007-Build-EXTRA_GNATTOOLS-for-Ada.patch"
        "0008-Prettify-linking-no-undefined.patch"
        "0009-gcc-make-xmmintrin-header-cplusplus-compatible-depre.patch"
        "0010-Fix-using-large-PCH.patch"
        "0011-Enable-shared-gnat-implib.patch"
        "0012-MinGW-w64-Enable-libitm.patch"
        "0013-MinGW-w64-Enable-shared-gnat.patch"
        "0014-gcc-5-branch-clone_function_name_1-Retain-any-stdcall-suffix.patch"
        "0014-gcc-6-branch-clone_function_name_1-Retain-any-stdcall-suffix.patch"
        "0015-Force-linking-to-libgcc_s_dw2-1.dll-deprecated.patch"
        "0016-disable-weak-refs-in-libstdc++.patch"
        "9000-gcc-5-branch-Added-mcf-thread-model-support-from-mcfgthread.patch"
        "9000-gcc-6-branch-Added-mcf-thread-model-support-from-mcfgthread.patch"
        "9999-gcc-6-branch-Add-defines-to-disable-optimize-for-size-changes.patch")
sha256sums=('SKIP'
            '49a5e264e611de7f2388f01ba649ec22cf3ae1cde3ba45082a7d72294c2f4fd7'
            '83e9c6f76f728ae3e2f2eabb588b0d6cea7a3eda03cd5e77aed9d613143b7348'
            '6033acda690786397059536787a6577e1a9f2b39f8a66276821917066094f43c'
            '388f423a67e4be6f547ca7e340ff8ee4c78b1ed83f3fd698daa409e309911807'
            '86fc77d5a6c137a9aca65ad6ba56653fb41b05636b763ce2c0b0b14d617c9de4'
            'c74b6962bf9bf0a73a73684398e0ee98af4b319622ac200f2d520582ca08f2a8'
            'd1e10cd2ef5594c34acead334bb93af500e00699ba673edc8916da22a572677d'
            '691bc4044726b4f7980be64b1296278a1ad9a19c8e1bec236d48b1277a1a64ba'
            'ec6800816632234afc35ce40542a6aab3ee76e8514a7d0cb4171fd874353ecd7'
            '0eaee0e1201f4f85ea20756432a9d51531e0e859f6f121276684e2b63b2ee315'
            '0decbbebda7ceac91da5d3dec9b7330f406a4358fa150560f08ff6f54739035f'
            '8faff8e503a617f283270f411399a8bcacda3ab62b4072dedf117e108af4844a'
            'fc34b667c94df53c96a1f39c7e89a737c64e59df19169b02182dde84b6bec39e'
            'bab73267116024d0b0d2a9dcb78a0ad839bb6a232f1ebbee7ed8fd54c8d71087'
            'ad4bb777a7f19070e83bdf5046281ee9e359ed039c70179285c4119244cf9093'
            '60a58ed41389691a68ef4b7d47a0328df4d28d26e6c680a6b06b31191481ca65'
            '262c6fb0f6c9951d69e4c2dcc27949aa8f2cca8e672faf66740a7dbba4a4cd2c'
            'c1e271c166de0062092cb61d50977c0e61d75b0ae6fb086cb8bb4da2b3fd18d7'
            'd8890acd9a8c4f9f4cb1f121b357608bb7512e52364ad5d7ab495b9f8f96dc63'
            '35584a9102449a5f527d48b4fc16c0473ae5a6dfe0fe866149728a5fff712845'
            'a82eadfbb6a182b1ffeb860e89c89f46373a8b891594280b2268ecac8d7bac88')

_threads="mcf"

pkgver() {
  cd "$_realname"
  printf "r%s.%s" "$(git rev-list --count HEAD)" "$(git rev-parse --short HEAD)"
}

prepare() {
  cd ${srcdir}/${_realname}
  GIT_AM="git am --committer-date-is-author-date"
  ${GIT_AM} "${srcdir}"/0001-${_branch}-gfortran-incorrect-reading-of-values-fr.patch || true
  ${GIT_AM} "${srcdir}"/0002-Relocate-libintl.patch
  ${GIT_AM} "${srcdir}"/0003-Windows-Follow-Posix-dir-exists-semantics-more-close.patch
  ${GIT_AM} "${srcdir}"/0004-Windows-Use-not-in-progpath-and-leave-case-as-is.patch
  ${GIT_AM} "${srcdir}"/0005-Windows-Don-t-ignore-native-system-header-dir.patch
  ${GIT_AM} "${srcdir}"/0006-${_branch}-Windows-New-feature-to-allow-overriding.patch
  ${GIT_AM} "${srcdir}"/0007-Build-EXTRA_GNATTOOLS-for-Ada.patch
  ${GIT_AM} "${srcdir}"/0008-Prettify-linking-no-undefined.patch
  ${GIT_AM} "${srcdir}"/0009-gcc-make-xmmintrin-header-cplusplus-compatible-depre.patch
  ${GIT_AM} "${srcdir}"/0010-Fix-using-large-PCH.patch
  ${GIT_AM} "${srcdir}"/0011-Enable-shared-gnat-implib.patch
  # it doesn't work at all
  # ${GIT_AM} "${srcdir}"/0012-MinGW-w64-Enable-libitm.patch
  ${GIT_AM} "${srcdir}"/0013-MinGW-w64-Enable-shared-gnat.patch
  ${GIT_AM} "${srcdir}"/0014-${_branch}-clone_function_name_1-Retain-any-stdcall-suffix.patch
#  ${GIT_AM} "${srcdir}"/0015-Force-linking-to-libgcc_s_dw2-1.dll-deprecated.patch
  ${GIT_AM} "${srcdir}"/0016-disable-weak-refs-in-libstdc++.patch
  # ${GIT_AM} "${srcdir}"/9999-gcc-6-branch-Add-defines-to-disable-optimize-for-size-changes.patch
  ${GIT_AM} "${srcdir}"/9000-${_branch}-Added-mcf-thread-model-support-from-mcfgthread.patch

  # do not expect $prefix/mingw symlink - this should be superceded by
  # 0004-Windows-Don-t-ignore-native-system-header-dir.patch .. but isn't!
  sed -i 's/${prefix}\/mingw\//${prefix}\//g' configure

  # change hardcoded /mingw prefix to the real prefix .. isn't this rubbish?
  # it might work at build time and could be important there but beyond that?!
  local MINGW_NATIVE_PREFIX=$(cygpath -am ${MINGW_PREFIX}/${MINGW_CHOST})
  sed -i "s#\\/mingw\\/#${MINGW_NATIVE_PREFIX//\//\\/}\\/#g" gcc/config/i386/mingw32.h
}

build() {
  [[ -d ${srcdir}/build-${MINGW_CHOST} ]] && rm -rf ${srcdir}/build-${MINGW_CHOST}
  mkdir -p ${srcdir}/build-${MINGW_CHOST} && cd ${srcdir}/build-${MINGW_CHOST}

  case "${CARCH}" in
    i686)
      LDFLAGS+=" -Wl,--large-address-aware"
      local _arch=i686
      local _conf="--enable-sjlj-exceptions"    # "--disable-sjlj-exceptions --with-dwarf2"
    ;;

    x86_64)
      local _arch=x86-64
      local _conf=""
    ;;
  esac

  ../${_realname}/configure \
    --prefix=${MINGW_PREFIX} \
    --with-local-prefix=${MINGW_PREFIX}/local \
    --build=${MINGW_CHOST} \
    --host=${MINGW_CHOST} \
    --target=${MINGW_CHOST} \
    --with-native-system-header-dir=${MINGW_PREFIX}/${MINGW_CHOST}/include \
    --libexecdir=${MINGW_PREFIX}/lib \
    --enable-bootstrap \
    --with-arch=${_arch} \
    --with-tune=nocona \
    --enable-languages=c,lto,c++ \
    --enable-shared --enable-static \
    --enable-threads=${_threads} \
    --enable-graphite \
    --enable-fully-dynamic-string \
    --enable-libstdcxx-time=yes \
    --disable-libstdcxx-pch \
    --disable-libstdcxx-debug \
    --disable-isl-version-check \
    --enable-lto \
    --enable-libgomp \
    --disable-multilib \
    --enable-checking=release \
    --disable-rpath \
    --disable-win32-registry \
    --disable-nls \
    --disable-werror \
    --disable-symvers \
    --with-libiconv \
    --with-system-zlib \
    --with-{gmp,mpfr,mpc,isl}=${MINGW_PREFIX} \
    --with-pkgversion="${_branch} HEAD with MCF thread model, built by LH_Mouse." \
    --with-bugurl="http://github.lhmouse.com/" \
    --with-gnu-as --with-gnu-ld \
    --disable-tls \
    ${_conf}
    #--enable-libitm
    #--enable-objc-gc
    #--with-gxx-include-dir=${MINGW_PREFIX}/include/c++/${_realpkgver} \
    #--enable-version-specific-runtime-libs \
    #--enable-libatomic \

  # While we're debugging -fopenmp problems at least.
  # .. we may as well not strip anything.
  if check_option "strip" "n"; then
    sed -i 's,^STRIP = .*$,STRIP = true,g'                   Makefile
    sed -i 's,^STRIP_FOR_TARGET=.*$,STRIP_FOR_TARGET=true,g' Makefile
  fi

  make all

  rm -rf "${srcdir}${MINGW_PREFIX}"
  make -j1 DESTDIR=${srcdir} install
}

package_mingw-w64-gcc-mcf() {
  pkgdesc="GNU Compiler Collection (C,C++,OpenMP) for MinGW-w64 with MCF thread model (devel)"
  depends=("${MINGW_PACKAGE_PREFIX}-binutils"
           "${MINGW_PACKAGE_PREFIX}-crt"
           "${MINGW_PACKAGE_PREFIX}-headers"
           "${MINGW_PACKAGE_PREFIX}-isl"
           "${MINGW_PACKAGE_PREFIX}-libiconv"
           "${MINGW_PACKAGE_PREFIX}-mpc"
           "${MINGW_PACKAGE_PREFIX}-windows-default-manifest"
           "${MINGW_PACKAGE_PREFIX}-winpthreads"
           "${MINGW_PACKAGE_PREFIX}-zlib"
           "${MINGW_PACKAGE_PREFIX}-${_realname}"-libs)
  provides=("${MINGW_PACKAGE_PREFIX}-${_realname}")
  conflicts=("${MINGW_PACKAGE_PREFIX}-${_realname}"
             "${MINGW_PACKAGE_PREFIX}-${_realname}-git")

  mkdir -p "${pkgdir}${MINGW_PREFIX}"
  cd "${srcdir}${MINGW_PREFIX}"
  _files_cp="$(find bin -type f -and -not -name "*.dll")"
  [[ -z "${_files_cp}" ]] || cp --parents -r ${_files_cp} --target-directory="${pkgdir}${MINGW_PREFIX}"
  cp --parents -r include   --target-directory="${pkgdir}${MINGW_PREFIX}"
  cp --parents -r lib       --target-directory="${pkgdir}${MINGW_PREFIX}"
}
package_mingw-w64-gcc-mcf-libs() {
  pkgdesc="GNU Compiler Collection (C,C++,OpenMP) for MinGW-w64 with MCF thread model (libs)"
  depends=("${MINGW_PACKAGE_PREFIX}-gmp"
           "${MINGW_PACKAGE_PREFIX}-libwinpthread")
  provides=("${MINGW_PACKAGE_PREFIX}-${_realname}-libs")
  conflicts=("${MINGW_PACKAGE_PREFIX}-${_realname}-libs"
             "${MINGW_PACKAGE_PREFIX}-${_realname}-libs-git")

  mkdir -p "${pkgdir}${MINGW_PREFIX}"
  cd "${srcdir}${MINGW_PREFIX}"
  _files_cp="$(find bin -type f -and -name "*.dll")"
  [[ -z "${_files_cp}" ]] || cp --parents -r ${_files_cp} --target-directory="${pkgdir}${MINGW_PREFIX}"
}

# Wrappers for package functions

# 32-bit wrappers
package_mingw-w64-i686-gcc-mcf() {
  package_mingw-w64-gcc-mcf
}
package_mingw-w64-i686-gcc-mcf-libs() {
  package_mingw-w64-gcc-mcf-libs
}

# 64-bit wrappers
package_mingw-w64-x86_64-gcc-mcf() {
  package_mingw-w64-gcc-mcf
}
package_mingw-w64-x86_64-gcc-mcf-libs() {
  package_mingw-w64-gcc-mcf-libs
}
